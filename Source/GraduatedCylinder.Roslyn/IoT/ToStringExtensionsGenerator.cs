using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace GraduatedCylinder.Roslyn.IoT;

[Generator]
public class ToStringExtensionsGenerator : BaseGenerator
{

    public ToStringExtensionsGenerator()
        : base("GraduatedCylinder.IoT") { }

    protected override void ExecuteInternal(GeneratorExecutionContext context) {
        if (context.SyntaxReceiver is not DimensionReceiver receiver) {
            return;
        }
        //Debugger.Launch();

        if (!SetExternalGenerationPath(context)) {
            return;
        }

        WriteAutoGeneratedNotification();

        Buffer.AppendLine("namespace GraduatedCylinder.Text;");
        Buffer.AppendLine();
        Buffer.AppendLine("public static partial class ToStringExtensions");
        Buffer.AppendLine("{");

        foreach (StructDeclarationSyntax @struct in receiver.GetDimensions(context.Compilation)) {
            Log($"Generating for {@struct.Identifier}");
            NameSet names = NameSet.FromDimensionType(@struct.Identifier.ToString());

            Buffer.AppendLine();
            Buffer.AppendLine($"\tpublic static string ToString(this {names.DimensionTypeName} value, {names.UnitsTypeName} units = {names.UnitsTypeName}.Unspecified, int precision = 2) {{");
            Buffer.AppendLine($"\t\t{names.DimensionTypeName} inUnits = value.In(units);");
            Buffer.AppendLine("\t\tstring format = Formats.GetPrecisionFormat(precision);");
            Buffer.AppendLine("\t\treturn string.Format(format, inUnits.Value, inUnits.Units.GetAbbreviation());");
            Buffer.AppendLine("\t}");
            Buffer.AppendLine();
            Buffer.AppendLine($"\tpublic static string ToString(this {names.DimensionTypeName} value, UnitPreferences preferences) {{");
            Buffer.AppendLine($"\t\treturn ToString(value, preferences.{names.UnitsTypeName}, preferences.Precision);");
            Buffer.AppendLine("\t}");
        }

        Buffer.AppendLine();
        Buffer.AppendLine("}");

        BufferToGeneratedFile("Source\\GraduatedCylinder.IoT.Text\\ToString.g.cs").SaveToDisk();
    }

    protected override void InitializeInternal(GeneratorInitializationContext context) {
        context.RegisterForSyntaxNotifications(() => new DimensionReceiver());
    }

}