using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace GraduatedCylinder.Roslyn.Both;

[Generator]
public class JsonConverterGenerator : BaseGenerator
{

    public JsonConverterGenerator()
        : base("GraduatedCylinder", "GraduatedCylinder.IoT") { }

    protected override void ExecuteInternal(GeneratorExecutionContext context) {
        if (context.SyntaxReceiver is not DimensionReceiver receiver) {
            return;
        }
        //Debugger.Launch();

        if (!SetExternalGenerationPath(context)) {
            return;
        }

        string jsonDllName = $"{context.Compilation.AssemblyName}.Json";
        foreach (StructDeclarationSyntax @struct in receiver.GetDimensions(context.Compilation)) {
            GenerateJsonConverter(jsonDllName, @struct);
        }
        GenerateJsonHelper(jsonDllName, receiver, context.Compilation);
    }

    protected override void InitializeInternal(GeneratorInitializationContext context) {
        context.RegisterForSyntaxNotifications(() => new DimensionReceiver());
    }

    private void GenerateJsonConverter(string jsonDllName, StructDeclarationSyntax @struct) {
        string filename = $"Source\\{jsonDllName}\\{@struct.Identifier}JsonConverter.g.cs";

        WriteAutoGeneratedNotification();

        Buffer.AppendLine("#nullable enable");
        Buffer.AppendLine("using System;");
        Buffer.AppendLine("using System.Text.Json;");
        Buffer.AppendLine("using System.Text.Json.Serialization;");
        Buffer.AppendLine("using GraduatedCylinder.Text;");
        Buffer.AppendLine();
        Buffer.AppendLine("namespace GraduatedCylinder.Json;");
        Buffer.AppendLine();
        Buffer.AppendLine($"public class {@struct.Identifier}JsonConverter : JsonConverter<{@struct.Identifier}>");
        Buffer.AppendLine("{");
        Buffer.AppendLine();
        Buffer.AppendLine("\tpublic int Precision { get; set; } = 2;");
        Buffer.AppendLine();
        Buffer.AppendLine($"\tpublic {@struct.Identifier}Unit Units {{ get; set; }} = {@struct.Identifier}Unit.Unspecified;");
        Buffer.AppendLine();
        Buffer.AppendLine(
            $"\tpublic override {@struct.Identifier} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {{");
        Buffer.AppendLine("\t\tstring? value = reader.GetString();");
        Buffer.AppendLine("\t\tif (value is null) {");
        Buffer.AppendLine("\t\t\tthrow new NullReferenceException(\"Null returned from Utf8JsonReader.GetString()\");");
        Buffer.AppendLine("\t\t}");
        Buffer.AppendLine($"\t\treturn Parser.Parse{@struct.Identifier}(value);");
        Buffer.AppendLine("\t}");
        Buffer.AppendLine();
        Buffer.AppendLine(
            $"\tpublic override void Write(Utf8JsonWriter writer, {@struct.Identifier} value, JsonSerializerOptions options) {{");
        Buffer.AppendLine("\t\twriter.WriteStringValue(value.ToString(Units, Precision));");
        Buffer.AppendLine("\t}");
        Buffer.AppendLine();
        Buffer.AppendLine("}");
        Buffer.AppendLine();

        BufferToGeneratedFile(filename).SaveToDisk();
    }

    private void GenerateJsonHelper(string jsonDllName, DimensionReceiver receiver, Compilation compilation) {
        string filename = $"Source\\{jsonDllName}\\JsonHelper.g.cs";

        WriteAutoGeneratedNotification();

        Buffer.AppendLine("using System.Text.Json;");
        Buffer.AppendLine("");
        Buffer.AppendLine("namespace GraduatedCylinder.Json;");
        Buffer.AppendLine();
        Buffer.AppendLine("public static class JsonHelper");
        Buffer.AppendLine("{");
        Buffer.AppendLine();

        List<StructDeclarationSyntax>? dimensions = receiver.GetDimensions(compilation).ToList();
        foreach (StructDeclarationSyntax @struct in dimensions) {
            Buffer.AppendLine(
                $"\tpublic static {@struct.Identifier}JsonConverter {@struct.Identifier}JsonConverter {{ get; }} = new {@struct.Identifier}JsonConverter();");
        }
        Buffer.AppendLine();

        Buffer.AppendLine("\tpublic static JsonSerializerOptions Options { get; } = new JsonSerializerOptions {");
        Buffer.AppendLine("\t\tConverters = {");
        foreach (StructDeclarationSyntax @struct in dimensions) {
            Buffer.AppendLine($"\t\t\t{@struct.Identifier}JsonConverter,");
        }
        Buffer.AppendLine("\t\t}");
        Buffer.AppendLine("\t};");
        Buffer.AppendLine();

        Buffer.AppendLine("\tpublic static void SetPrecision(int value) {");
        foreach (StructDeclarationSyntax @struct in dimensions) {
            Buffer.AppendLine($"\t\t{@struct.Identifier}JsonConverter.Precision = value;");
        }
        Buffer.AppendLine("\t}");
        Buffer.AppendLine();

        Buffer.AppendLine("}");

        BufferToGeneratedFile(filename).SaveToDisk();
    }

}