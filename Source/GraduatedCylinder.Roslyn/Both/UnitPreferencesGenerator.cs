using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace GraduatedCylinder.Roslyn.Both;

[Generator]
public class UnitPreferencesGenerator : BaseGenerator
{

    public UnitPreferencesGenerator()
        : base("GraduatedCylinder", "GraduatedCylinder.IoT") { }

    protected override void ExecuteInternal(GeneratorExecutionContext context) {
        if (context.SyntaxReceiver is not DimensionReceiver receiver) {
            return;
        }
        //Debugger.Launch();

        string filename = "UnitPreferences.g.cs";

        WriteAutoGeneratedNotification();

        Buffer.AppendLine("using System;");
        Buffer.AppendLine();
        Buffer.AppendLine("namespace GraduatedCylinder;");
        Buffer.AppendLine();
        Buffer.AppendLine("public partial class UnitPreferences {");
        Buffer.AppendLine();

        List<StructDeclarationSyntax> structs = receiver.GetDimensions(context.Compilation).ToList();

        foreach (StructDeclarationSyntax @struct in structs) {
            Log($"Generating property for {@struct.Identifier}");
            Buffer.AppendLine($"\tpublic {@struct.Identifier}Unit {@struct.Identifier}Unit {{ get; set; }}");
            Buffer.AppendLine();
        }

        if (context.Compilation.AssemblyName == "GraduatedCylinder") {
            foreach (StructDeclarationSyntax @struct in structs) {
                Log($"Generating 'Fix' for {@struct.Identifier}");
                Buffer.AppendLine($"\tpublic void Fix({@struct.Identifier} value) {{");
                Buffer.AppendLine($"\t\tvalue.Units = {@struct.Identifier}Unit;");
                Buffer.AppendLine("\t}");
                Buffer.AppendLine();
            }
        }

        Buffer.AppendLine();
        Buffer.AppendLine("}");

        BufferToGeneratedFile(filename).AddToContext(context);
    }

    protected override void InitializeInternal(GeneratorInitializationContext context) {
        context.RegisterForSyntaxNotifications(() => new DimensionReceiver());
    }

}